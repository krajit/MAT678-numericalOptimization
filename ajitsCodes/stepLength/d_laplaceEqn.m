% Generated by ADiMat 0.6.6-5530 (00419e1f)
% © 2001-2008 Andre Vehreschild <vehreschild@sc.rwth-aachen.de>
% © 2009-2018 Johannes Willkomm <johannes@johannes-willkomm.de>
% TU Darmstadt, 64289 Darmstadt, Germany
% Visit us on the web at http://www.adimat.de/
% Report bugs to johannes@johannes-willkomm.de
%
%                             DISCLAIMER
% 
% ADiMat was prepared as part of an employment at the Institute for Scientific Computing,
% RWTH Aachen University, Germany and at the Institute for Scientific Computing,
% TU Darmstadt, Germany and is provided AS IS. 
% NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL REPUBLIC OF GERMANY
% NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY, NOT THE TU DARMSTADT,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY, EXPRESS OR IMPLIED,
% OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS,
% OR USEFULNESS OF ANY INFORMATION OR PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE
% WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.
%
% Parameters:
%  - dependents=out
%  - independents=U
%  - inputEncoding=ISO-8859-1
%
% Functions in this file: d_laplaceEqn
%

function [d_out out] = d_laplaceEqn(d_U, U)
   nx = size(U, 1);
   ny = size(U, 2);
   dx = 1 / (nx - 1);
   dy = 1 / (ny - 1);
   x = 0:dx:1;
   y = 0:dy:1;
   u = zeros(nx, ny);
   d_u = d_zeros(u);
   e = zeros(nx, ny);
   Ex = sparse(2 : nx, 1 : nx - 1, 1, nx, nx);
   Cx = sparse(1 : 1, 2 : 2, 1, nx, nx);
   Dx = sparse(nx : nx, nx - 1 : nx - 1, 1, nx, nx);
   Ax = Ex + Ex' - 2*speye(nx) + Cx + Dx;
   Ey = sparse(2 : ny, 1 : ny - 1, 1, ny, ny);
   Ay = Ey + Ey' - 2*speye(ny) + Cx + Dx;
   Bx = -1 * speye(nx);
   A = -kron(Ay / dy^2, speye(nx)) - kron(speye(ny), Ax / dx^2) - kron(Bx, speye(nx));
   f = @(x, y) 1 - min(1, max(0, 12.*((x - 0.5).*(x - 0.5) + (y - 0.5).*(y - 0.5)) - 1.0/3));
   tmpda1 = x';
   d_S = adimat_opdiff_sum(d_U, d_zeros(f(tmpda1, y)));
   S = f(tmpda1, y) + U;
   d_tmpca1 = d_S;
   tmpca1 = S;
   [d_S S] = adimat_diff_reshape(d_tmpca1, tmpca1, [], 1);
   d_tmpca1 = d_S;
   tmpca1 = S;
   d_S = adimat_opdiff_sol_left(A, d_tmpca1, tmpca1);
   S = A \ tmpca1;
   d_tmpca1 = d_S;
   tmpca1 = S;
   [d_S S] = adimat_diff_reshape(d_tmpca1, tmpca1, nx, ny);
   tmpda2 = 1 : ny;
   tmpda1 = 1 : nx;
   d_u = adimat_opdiff_subsasgn(d_u, struct('type', {'()'}, 'subs', {{tmpda1 tmpda2}}), d_S);
   u(tmpda1, tmpda2) = S;
   M = @(x, y) -142.0/3 + 12.*((x - 0.5).*(x - 0.5) + (y - 0.5).*(y - 0.5));
   yd = M(x', y);
   e(1, :) = -12;
   e(nx, :) = -12;
   e(:, 1) = -12;
   e(:, ny) = -12;
   d_tmpca15 = adimat_opdiff_epow_right(d_U, U, 2);
   tmpca15 = U .^ 2;
   d_tmpca14 = adimat_diff_sum1(d_tmpca15, tmpca15);
   tmpca14 = sum(tmpca15);
   d_tmpca13 = adimat_opdiff_mult_left(0.5, d_tmpca14, tmpca14);
   tmpca13 = 0.5 * tmpca14;
   d_tmpca12 = adimat_opdiff_mult_right(d_tmpca13, tmpca13, dx);
   tmpca12 = tmpca13 * dx;
   d_tmpca11 = adimat_opdiff_mult_right(d_tmpca12, tmpca12, dy);
   tmpca11 = tmpca12 * dy;
   d_tmpca10 = adimat_opdiff_emult_left(e, d_u, u);
   tmpca10 = e .* u;
   d_tmpca9 = adimat_opdiff_mult_right(d_tmpca10, tmpca10, dx);
   tmpca9 = tmpca10 * dx;
   d_tmpca8 = adimat_diff_sum1(d_tmpca9, tmpca9);
   tmpca8 = sum(tmpca9);
   d_tmpca7 = adimat_opdiff_sum(d_u, d_zeros(-yd));
   tmpca7 = u - yd;
   d_tmpca6 = adimat_opdiff_epow_right(d_tmpca7, tmpca7, 2);
   tmpca6 = tmpca7 .^ 2;
   d_tmpca5 = adimat_opdiff_mult_left(0.5, d_tmpca6, tmpca6);
   tmpca5 = 0.5 * tmpca6;
   d_tmpca4 = adimat_opdiff_mult_right(d_tmpca5, tmpca5, dx);
   tmpca4 = tmpca5 * dx;
   d_tmpca3 = adimat_opdiff_mult_right(d_tmpca4, tmpca4, dy);
   tmpca3 = tmpca4 * dy;
   d_tmpca2 = adimat_diff_sum1(d_tmpca3, tmpca3);
   tmpca2 = sum(tmpca3);
   d_tmpca1 = adimat_opdiff_sum(d_tmpca2, d_tmpca8, d_tmpca11);
   tmpca1 = tmpca2 + tmpca8 + tmpca11;
   d_out = adimat_diff_sum1(d_tmpca1, tmpca1);
   out = sum(tmpca1);
end
